package com.synechron.paging_sorting.controllers;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.synechron.paging_sorting.entity.CibilScore;
import com.synechron.paging_sorting.repos.ScoreRepository;

@RestController
public class PagingControllers {

	@Autowired
	private ScoreRepository repo;

	@GetMapping(path = "/score/sort/{prop}")
	public Iterable<CibilScore> getScoresByOrder(@PathVariable("prop") String propName) {
		return this.repo.findAll(Sort.by(propName));
	}

	@GetMapping(path = "/score/sort/{page}/{size}/{prop}")
	public Iterable<CibilScore> paginate(@PathVariable("page") int page, @PathVariable("size") int size,
			@PathVariable("propName") String propName) {
		Pageable pageable = PageRequest.of(page, size, Sort.by(propName).ascending());
		Page<CibilScore> pages = this.repo.findAll(pageable);
		if(pages.hasContent()) {
			return pages.getContent();
		} else {
			return new ArrayList<>();
		}
		
		return null;
	}

}
